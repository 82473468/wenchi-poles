// Generated by gencpp from file sensors/gprmc.msg
// DO NOT EDIT!


#ifndef SENSORS_MESSAGE_GPRMC_H
#define SENSORS_MESSAGE_GPRMC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sensors
{
template <class ContainerAllocator>
struct gprmc_
{
  typedef gprmc_<ContainerAllocator> Type;

  gprmc_()
    : header()
    , rmc_1()
    , utc_time_2()
    , status_3()
    , latitude_4(0.0)
    , N_5()
    , longitude_6(0.0)
    , E_7()
    , spd_8(0.0)
    , cog_9(0.0)
    , utc_day_10()
    , mv_11(0.0)
    , mvE_12()
    , mode_13()
    , cs_14()
    , initdata_0()  {
    }
  gprmc_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , rmc_1(_alloc)
    , utc_time_2(_alloc)
    , status_3(_alloc)
    , latitude_4(0.0)
    , N_5(_alloc)
    , longitude_6(0.0)
    , E_7(_alloc)
    , spd_8(0.0)
    , cog_9(0.0)
    , utc_day_10(_alloc)
    , mv_11(0.0)
    , mvE_12(_alloc)
    , mode_13(_alloc)
    , cs_14(_alloc)
    , initdata_0(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rmc_1_type;
  _rmc_1_type rmc_1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _utc_time_2_type;
  _utc_time_2_type utc_time_2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_3_type;
  _status_3_type status_3;

   typedef float _latitude_4_type;
  _latitude_4_type latitude_4;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _N_5_type;
  _N_5_type N_5;

   typedef float _longitude_6_type;
  _longitude_6_type longitude_6;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _E_7_type;
  _E_7_type E_7;

   typedef float _spd_8_type;
  _spd_8_type spd_8;

   typedef float _cog_9_type;
  _cog_9_type cog_9;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _utc_day_10_type;
  _utc_day_10_type utc_day_10;

   typedef float _mv_11_type;
  _mv_11_type mv_11;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mvE_12_type;
  _mvE_12_type mvE_12;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_13_type;
  _mode_13_type mode_13;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cs_14_type;
  _cs_14_type cs_14;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _initdata_0_type;
  _initdata_0_type initdata_0;




  typedef boost::shared_ptr< ::sensors::gprmc_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensors::gprmc_<ContainerAllocator> const> ConstPtr;

}; // struct gprmc_

typedef ::sensors::gprmc_<std::allocator<void> > gprmc;

typedef boost::shared_ptr< ::sensors::gprmc > gprmcPtr;
typedef boost::shared_ptr< ::sensors::gprmc const> gprmcConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensors::gprmc_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensors::gprmc_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sensors

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensors': ['/home/galaxy/Pictures/rs_pro/src/RS_Localization/sensors/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sensors::gprmc_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensors::gprmc_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensors::gprmc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensors::gprmc_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensors::gprmc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensors::gprmc_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensors::gprmc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c3c60d26f44cee28eb426a9d0a334ae4";
  }

  static const char* value(const ::sensors::gprmc_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc3c60d26f44cee28ULL;
  static const uint64_t static_value2 = 0xeb426a9d0a334ae4ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensors::gprmc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensors/gprmc";
  }

  static const char* value(const ::sensors::gprmc_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensors::gprmc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
string rmc_1\n\
string utc_time_2\n\
string status_3\n\
float32 latitude_4\n\
string N_5\n\
float32 longitude_6\n\
string E_7\n\
float32 spd_8\n\
float32 cog_9\n\
string utc_day_10\n\
float32 mv_11\n\
string mvE_12\n\
string mode_13\n\
string cs_14\n\
string initdata_0\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::sensors::gprmc_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensors::gprmc_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.rmc_1);
      stream.next(m.utc_time_2);
      stream.next(m.status_3);
      stream.next(m.latitude_4);
      stream.next(m.N_5);
      stream.next(m.longitude_6);
      stream.next(m.E_7);
      stream.next(m.spd_8);
      stream.next(m.cog_9);
      stream.next(m.utc_day_10);
      stream.next(m.mv_11);
      stream.next(m.mvE_12);
      stream.next(m.mode_13);
      stream.next(m.cs_14);
      stream.next(m.initdata_0);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gprmc_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensors::gprmc_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensors::gprmc_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "rmc_1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rmc_1);
    s << indent << "utc_time_2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.utc_time_2);
    s << indent << "status_3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status_3);
    s << indent << "latitude_4: ";
    Printer<float>::stream(s, indent + "  ", v.latitude_4);
    s << indent << "N_5: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.N_5);
    s << indent << "longitude_6: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_6);
    s << indent << "E_7: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.E_7);
    s << indent << "spd_8: ";
    Printer<float>::stream(s, indent + "  ", v.spd_8);
    s << indent << "cog_9: ";
    Printer<float>::stream(s, indent + "  ", v.cog_9);
    s << indent << "utc_day_10: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.utc_day_10);
    s << indent << "mv_11: ";
    Printer<float>::stream(s, indent + "  ", v.mv_11);
    s << indent << "mvE_12: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mvE_12);
    s << indent << "mode_13: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode_13);
    s << indent << "cs_14: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cs_14);
    s << indent << "initdata_0: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.initdata_0);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSORS_MESSAGE_GPRMC_H
