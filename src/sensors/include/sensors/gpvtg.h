// Generated by gencpp from file sensors/gpvtg.msg
// DO NOT EDIT!


#ifndef SENSORS_MESSAGE_GPVTG_H
#define SENSORS_MESSAGE_GPVTG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sensors
{
template <class ContainerAllocator>
struct gpvtg_
{
  typedef gpvtg_<ContainerAllocator> Type;

  gpvtg_()
    : header()
    , vtg_1()
    , cogt_2(0.0)
    , T_3()
    , cogm_4(0.0)
    , M_5()
    , sog_6(0.0)
    , N_7()
    , kph_8(0.0)
    , K_9()
    , mode_10()
    , cs_11()  {
    }
  gpvtg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vtg_1(_alloc)
    , cogt_2(0.0)
    , T_3(_alloc)
    , cogm_4(0.0)
    , M_5(_alloc)
    , sog_6(0.0)
    , N_7(_alloc)
    , kph_8(0.0)
    , K_9(_alloc)
    , mode_10(_alloc)
    , cs_11(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _vtg_1_type;
  _vtg_1_type vtg_1;

   typedef float _cogt_2_type;
  _cogt_2_type cogt_2;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _T_3_type;
  _T_3_type T_3;

   typedef float _cogm_4_type;
  _cogm_4_type cogm_4;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _M_5_type;
  _M_5_type M_5;

   typedef float _sog_6_type;
  _sog_6_type sog_6;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _N_7_type;
  _N_7_type N_7;

   typedef float _kph_8_type;
  _kph_8_type kph_8;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _K_9_type;
  _K_9_type K_9;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_10_type;
  _mode_10_type mode_10;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cs_11_type;
  _cs_11_type cs_11;




  typedef boost::shared_ptr< ::sensors::gpvtg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensors::gpvtg_<ContainerAllocator> const> ConstPtr;

}; // struct gpvtg_

typedef ::sensors::gpvtg_<std::allocator<void> > gpvtg;

typedef boost::shared_ptr< ::sensors::gpvtg > gpvtgPtr;
typedef boost::shared_ptr< ::sensors::gpvtg const> gpvtgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensors::gpvtg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensors::gpvtg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sensors

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensors': ['/home/galaxy/Pictures/rs_pro/src/RS_Localization/sensors/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sensors::gpvtg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensors::gpvtg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensors::gpvtg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensors::gpvtg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensors::gpvtg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensors::gpvtg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensors::gpvtg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "931030a0fe2e029911b0d8bcbce20a15";
  }

  static const char* value(const ::sensors::gpvtg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x931030a0fe2e0299ULL;
  static const uint64_t static_value2 = 0x11b0d8bcbce20a15ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensors::gpvtg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensors/gpvtg";
  }

  static const char* value(const ::sensors::gpvtg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensors::gpvtg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
string vtg_1\n\
float32  cogt_2\n\
string T_3\n\
float32 cogm_4\n\
string M_5\n\
float32 sog_6\n\
string N_7\n\
float32 kph_8\n\
string K_9\n\
string mode_10\n\
string cs_11\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::sensors::gpvtg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensors::gpvtg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vtg_1);
      stream.next(m.cogt_2);
      stream.next(m.T_3);
      stream.next(m.cogm_4);
      stream.next(m.M_5);
      stream.next(m.sog_6);
      stream.next(m.N_7);
      stream.next(m.kph_8);
      stream.next(m.K_9);
      stream.next(m.mode_10);
      stream.next(m.cs_11);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gpvtg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensors::gpvtg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensors::gpvtg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vtg_1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.vtg_1);
    s << indent << "cogt_2: ";
    Printer<float>::stream(s, indent + "  ", v.cogt_2);
    s << indent << "T_3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.T_3);
    s << indent << "cogm_4: ";
    Printer<float>::stream(s, indent + "  ", v.cogm_4);
    s << indent << "M_5: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.M_5);
    s << indent << "sog_6: ";
    Printer<float>::stream(s, indent + "  ", v.sog_6);
    s << indent << "N_7: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.N_7);
    s << indent << "kph_8: ";
    Printer<float>::stream(s, indent + "  ", v.kph_8);
    s << indent << "K_9: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.K_9);
    s << indent << "mode_10: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode_10);
    s << indent << "cs_11: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cs_11);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSORS_MESSAGE_GPVTG_H
